Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as * with open
Variables:
SS ALPHABET DIGIT OTHER ALPHANUM STRING_WORD VAR_FIRST VAR VALUE NUMBER VV BOOLEAN OP EXPRESSION RELATION STRING ARRAY DICT_CONTENT DICT BODY COMMENT IF_HEADER IF ELIF_HEADER ELIF ELSE WHILE WHILE_HEADER FOR_HEADER FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK PASS DEF_HEADER DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS CLASS_HEADER CLASS_S IMP_S IMPORT WITH WITH_HEADER
Productions:
SS -> SS SS | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | CONTINUE | WITH | PASS | VAR = VV | VAR OP = VV | none;
ALPHABET -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z;
DIGIT -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
OTHER -> ! | # | $ | % | & | ( | ) | * | + | , | - | . | / | : | < | = | > | ? | @ | [ | \ | ] | ^ | _ | ` | { | } | ~ | ' | " | |;
VAR_FIRST -> ALPHABET | _;
ALPHANUM -> VAR_FIRST | DIGIT | ALPHANUM ALPHANUM;
VAR -> VAR_FIRST ALPHANUM | VAR_FIRST;
NUMBER -> DIGIT | NUMBER NUMBER;
STRING_WORD -> ALPHABET | DIGIT | OTHER | STRING_WORD STRING_WORD;
VALUE -> NUMBER | BOOLEAN | STRING | ARRAY | DICT | VV OP VV | ( VV ) | none;
VV ->  VAR | VALUE | VV , VV;
BOOLEAN -> BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VV RELATION VV | true | false;
OP -> + | - | * | / | / / | * * | %;
EXPRESSION -> BOOLEAN | ( BOOLEAN );
RELATION -> > = | < = | = = | ! = | < | > | is | is not | in | not in;
STRING -> STRING + STRING | " STRING_WORD " | ' STRING_WORD ';
ARRAY -> [ VV ] | [ ] | [ VV for VAR in VV ] | [ VV for VAR in RANGE ];
DICT -> { } | { DICT_CONTENT };
DICT_CONTENT -> VV : VV | DICT_CONTENT , DICT_CONTENT;
BODY -> VAR | BODY BODY;
COMMENT -> " " " BODY " " " | ' ' ' BODY ' ' ' | # BODY;
IF_HEADER -> if EXPRESSION :;
IF -> IF_HEADER SS | IF ELIF | IF ELSE;
ELIF_HEADER -> elif EXPRESSION :;
ELIF ->  ELIF_HEADER SS | ELIF ELIF | ELIF ELSE;
ELSE -> else : SS;
WHILE_HEADER -> while EXPRESSION :;
WHILE ->  WHILE_HEADER SS;
FOR_HEADER -> for FOR_VAR in ITERABLE :;
FOR_VAR -> VAR | VAR , FOR_VAR;
ITERABLE -> range ( VV ) | ( DICT ) | DICT | ( ARRAY ) | ARRAY | STRING;
FOR -> FOR_HEADER SS;
ITERATE -> FOR_HEADER | WHILE_HEADER | FOR | WHILE;
BREAK -> ITERATE break | ITERATE break SS;
CONTINUE -> ITERATE continue | ITERATE continue SS;
PASS -> pass;
DEF_HEADER -> def VAR ( VV ) : | def VAR ( ) :;
DEF_S -> DEF_S DEF_S | FUNC_BODY;
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR = VV | VAR OP = VV | IMPORT | RAISE | WITH_FUNC | PASS | RETURN | none;
DEF -> DEF_HEADER DEF_S | DEF_HEADER DEF_S;
RETURN -> return BOOLEAN | return VALUE | return;
IF_FUNC -> IF_HEADER FUNC_BODY | IF_FUNC ELIF_FUNC | IF_FUNC ELSE_FUNC;
ELIF_FUNC -> ELIF_HEADER FUNC_BODY | ELIF_FUNC ELIF_FUNC | ELIF_FUNC ELSE_FUNC;
ELSE_FUNC -> else : FUNC_BODY;
FOR_FUNC -> FOR_HEADER FUNC_BODY;
WHILE_FUNC -> WHILE_HEADER FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | WHILE_HEADER | FOR_HEADER;
CONTINUE_FUNC -> ITERATE_FUNC continue | ITERATE_FUNC continue FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC break | ITERATE_FUNC break FUNC_BODY;
WITH_FUNC -> WITH_HEADER FUNC_BODY;
RAISE -> raise ( VV ) | raise ( );
CLASS_HEADER -> class VAR : | class VAR ( VV ) : | class VAR ( ) :;
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | DEF | VAR = VV | VAR OP = VV | BREAK | CONTINUE | PASS;
CLASS -> CLASS_HEADER CLASS_S;
IMPORT -> from VAR import IMP_S | import VAR as VAR | import VAR;
IMP_S -> * | VAR as VAR | VAR;
WITH_HEADER -> with open ( VV ) as VAR :;
WITH -> WITH_HEADER SS